这是一个测试文档。

它包含多个段落，用于测试文档处理功能。

每个段落都有不同的内容，包括：
1. 普通文本
2. 特殊字符 !@#$%^&*()
3. 中文字符 你好世界
4. 数字 1234567890

这个文档将被用来测试：
- 文档加载
- 文本预处理
- 文本分块

测试完成！

现在让我们添加更多的内容来测试分块功能。

这是一个新的段落，包含了一些技术术语：
- 机器学习 (Machine Learning)
- 深度学习 (Deep Learning)
- 自然语言处理 (NLP)
- 计算机视觉 (Computer Vision)

接下来是一些代码示例：
```python
def hello_world():
    print("Hello, World!")
    
class Example:
    def __init__(self):
        self.name = "Example"
        
    def say_hello(self):
        print(f"Hello from {self.name}")
```

这里是一些数学公式：
1. 欧拉公式：e^(iπ) + 1 = 0
2. 勾股定理：a² + b² = c²
3. 二次方程：ax² + bx + c = 0

让我们添加一些长段落来测试分块：
在人工智能领域，机器学习是一种让计算机系统从数据中学习的方法。它使用统计技术让计算机系统能够"学习"如何完成任务，而不需要明确编程。深度学习是机器学习的一个子集，它使用多层神经网络来模拟人脑的工作方式。这些网络可以学习识别模式、分类数据、做出预测等。

自然语言处理（NLP）是人工智能的一个重要分支，它研究如何让计算机理解、解释和生成人类语言。NLP的应用包括机器翻译、情感分析、文本摘要、问答系统等。随着深度学习的发展，NLP技术取得了显著的进步，特别是在语言模型方面。

计算机视觉是另一个重要的AI领域，它研究如何让计算机"看"和理解视觉信息。这包括图像识别、物体检测、图像分割等任务。计算机视觉技术已经广泛应用于自动驾驶、医疗影像分析、安防监控等领域。

最后，让我们添加一些不同语言的文本：
English: This is a test document for RAG system.
日本語: これはRAGシステムのテスト文書です。
한국어: 이것은 RAG 시스템을 위한 테스트 문서입니다。
Deutsch: Dies ist ein Testdokument für das RAG-System.

测试文档到此结束。希望这些内容能够帮助我们更好地测试文档处理功能！

让我们继续添加更多内容：

1. 技术文章节选：
在Transformer架构中，注意力机制（Attention Mechanism）是一个核心组件。它允许模型在处理序列数据时，动态地关注输入序列的不同部分。这种机制通过计算查询（Query）、键（Key）和值（Value）之间的关系来实现。多头注意力（Multi-Head Attention）进一步扩展了这一概念，使模型能够同时关注多个不同的表示子空间。

2. 代码注释示例：
/**
 * 计算两个向量的余弦相似度
 * @param vec1 第一个向量
 * @param vec2 第二个向量
 * @return 相似度得分，范围[-1, 1]
 */
def cosine_similarity(vec1, vec2):
    dot_product = np.dot(vec1, vec2)
    norm1 = np.linalg.norm(vec1)
    norm2 = np.linalg.norm(vec2)
    return dot_product / (norm1 * norm2)

3. 数据结构描述：
在RAG系统中，文档通常被组织成以下结构：
- Document: 原始文档
  - Chunks: 文档分块
    - Embeddings: 向量表示
    - Metadata: 元数据（如来源、时间戳等）
- Index: 向量索引
  - FAISS/Chroma: 向量数据库
  - Search: 相似度搜索

4. 配置示例：
```yaml
rag_config:
  chunk_size: 1000
  chunk_overlap: 200
  embedding_model: "sentence-transformers/all-MiniLM-L6-v2"
  vector_store: "faiss"
  search_top_k: 5
```

5. 错误处理场景：
try:
    result = process_document(file_path)
except FileNotFoundError:
    logger.error(f"文件不存在: {file_path}")
except ValueError as e:
    logger.error(f"文件格式错误: {str(e)}")
except Exception as e:
    logger.error(f"处理文件时发生错误: {str(e)}")

6. 性能优化建议：
- 使用批处理（Batch Processing）处理大量文档
- 实现缓存机制减少重复计算
- 使用多进程并行处理
- 优化向量索引结构
- 实现增量更新机制

7. 测试用例：
```python
def test_document_processing():
    # 测试文档加载
    doc = load_document("test.txt")
    assert len(doc) > 0
    
    # 测试文本预处理
    processed = preprocess_text(doc)
    assert len(processed) <= len(doc)
    
    # 测试文本分块
    chunks = split_text(processed)
    assert len(chunks) > 0
    assert all(len(chunk) <= 1000 for chunk in chunks)
```

8. 部署配置：
```dockerfile
FROM python:3.9
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["python", "main.py"]
```

9. API文档示例：
```markdown
# RAG API 文档

## 端点：/api/search
- 方法：POST
- 参数：
  - query: 搜索查询
  - top_k: 返回结果数量
- 返回：
  - results: 相关文档列表
  - scores: 相似度得分
```

10. 系统架构图：
```
[用户请求] -> [API网关] -> [文档处理器] -> [向量化器] -> [向量数据库] -> [检索器] -> [答案生成器] -> [用户响应]
```

这些新增内容涵盖了：
1. 技术文档
2. 代码和注释
3. 配置信息
4. 错误处理
5. 性能优化
6. 测试用例
7. 部署配置
8. API文档
9. 系统架构

这些内容将帮助我们更全面地测试文档处理系统的各个方面。

让我们继续添加更多特殊场景的测试内容：

11. 边界情况测试：
```python
# 空文本测试
empty_text = ""
# 极长文本测试（超过10000字符）
long_text = "a" * 10001
# 特殊字符测试
special_chars = "".join(chr(i) for i in range(32, 127))
# Unicode测试
unicode_text = "你好世界 🌍 🚀 ✨"
```

12. 表格数据测试：
| 模型名称 | 参数量 | 训练数据 | 应用场景 |
|---------|--------|----------|----------|
| GPT-3 | 175B | 45TB | 通用任务 |
| BERT | 340M | 16GB | 文本理解 |
| T5 | 11B | 750GB | 文本生成 |

13. JSON数据测试：
```json
{
  "document": {
    "id": "doc_001",
    "content": "这是一个测试文档",
    "metadata": {
      "author": "测试用户",
      "created_at": "2024-01-01T00:00:00Z",
      "tags": ["测试", "文档", "RAG"]
    }
  }
}
```

14. 日志文件测试：
```
[2024-01-01 12:00:00] INFO: 开始处理文档
[2024-01-01 12:00:01] DEBUG: 加载文档成功
[2024-01-01 12:00:02] WARNING: 文档格式可能有问题
[2024-01-01 12:00:03] ERROR: 处理失败，错误信息：文件格式不支持
```

15. 代码差异测试：
```diff
- def old_function():
-     return "旧版本"
+ def new_function():
+     return "新版本"
```

16. 数学公式复杂测试：
```
\begin{equation}
\frac{\partial L}{\partial W} = \frac{1}{N}\sum_{i=1}^{N}\frac{\partial L_i}{\partial W} + \lambda W
\end{equation}
```

17. 正则表达式测试：
```regex
^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$
```

18. SQL查询测试：
```sql
SELECT d.id, d.content, m.author
FROM documents d
JOIN metadata m ON d.id = m.doc_id
WHERE d.created_at > '2024-01-01'
ORDER BY d.created_at DESC
LIMIT 10;
```

19. 命令行参数测试：
```bash
python process_docs.py \
  --input-dir ./data \
  --output-dir ./output \
  --chunk-size 1000 \
  --chunk-overlap 200 \
  --model all-MiniLM-L6-v2
```

20. 配置文件复杂测试：
```toml
[system]
name = "RAG System"
version = "1.0.0"
debug = false

[processing]
chunk_size = 1000
chunk_overlap = 200
max_workers = 4

[models]
embedding = "sentence-transformers/all-MiniLM-L6-v2"
language = "zh"

[storage]
type = "faiss"
path = "./data/vectors"
```

21. 异常文本测试：
```
正常文本 中间插入\n换行符 继续文本
Tab\t字符测试
多个    空格测试
混合编码测试：你好Hello123!@#
```

22. 嵌套结构测试：
```
标题1
=====
内容1

标题2
-----
内容2
  子标题1
  ~~~~~~~
  子内容1

  子标题2
  ~~~~~~~
  子内容2
```

23. 引用测试：
> 这是一段引用文本
> 可以包含多行
> 甚至可以包含代码：
> ```python
> print("Hello")
> ```

24. 列表嵌套测试：
1. 第一级
   - 第二级
     * 第三级
       + 第四级
2. 另一个第一级
   - 另一个第二级

25. 特殊格式测试：
```
<xml>
  <document>
    <title>测试文档</title>
    <content>这是内容</content>
    <metadata>
      <author>测试用户</author>
      <date>2024-01-01</date>
    </metadata>
  </document>
</xml>
```

这些新增的特殊场景测试内容将帮助我们测试：
1. 边界情况处理
2. 特殊格式解析
3. 复杂结构处理
4. 编码问题处理
5. 格式保持能力
6. 嵌套结构处理
7. 特殊字符处理
8. 多格式混合处理

这些测试用例将更全面地验证文档处理系统的健壮性和可靠性。 